/*---------------------------------------------------------*/function computeTotalDivergence (treeID){	ExecuteCommands ("bNames = BranchName   ("+treeID+",-1);");	ExecuteCommands ("bLen   = BranchLength ("+treeID+",-1);");		sum  = 0;	sum2 = 0;		for (k=0; k<Columns(bNames); k=k+1)	{		aNodeName = bNames[k];		sum  = sum + bLen[k]*multFactors[aNodeName];		sum2 = sum2 + bLen[k];	}		return {{sum,sum2}};}/*---------------------------------------------------------*/function computeMultFactors (treeID){	ExecuteCommands ("treeAVL2 = "+treeID + " ^ 0;leafCount=TipCount("+treeID+");"); 		multFactors = {};	for (k=1; k<Abs(treeAVL2); k=k+1)	{		aNode = treeAVL2[k];		aNodeName = aNode["Name"];		parentIndex = aNode["Parent"];		k2 = Abs(aNode["Children"]);		if (k2)		{			currentDepth = aNode["Below"];			multFactors[aNodeName] = currentDepth;					if (parentIndex > 0)			{				pInfo = treeAVL2[parentIndex];				pInfo ["Below"] = pInfo ["Below"] + currentDepth;				treeAVL2[parentIndex] = pInfo;			}		}		else		{			multFactors[aNodeName] = 1;			pInfo = treeAVL2[parentIndex];			pInfo ["Below"] = pInfo ["Below"] + 1;			treeAVL2[parentIndex] = pInfo;		}			}	pKeys 			= Rows(multFactors);	for (k=0; k<Columns(pKeys); k=k+1)	{		aNodeName = pKeys[k];		multFactors[aNodeName] = multFactors[aNodeName] * (leafCount-multFactors[aNodeName]);	}	return 0;}
ExecuteAFile  (HYPHY_BASE_DIRECTORY+"TemplateBatchFiles"+				DIRECTORY_SEPARATOR+"Utility" + 				DIRECTORY_SEPARATOR+"AncestralMapper.bf");likelihoodFnChoice = 0;if (Rows("LikelihoodFunction")>1){	ChoiceList  (likelihoodFnChoice,"Choose a Likelihood Function",1,NO_SKIP,LikelihoodFunction);}		if (likelihoodFnChoice<0){	return;} 	GetString 		(LF_NAME,LikelihoodFunction,likelihoodFnChoice);ExecuteCommands ("GetString(_lfInfo,"+LF_NAME+",-1);");fprintf			(stdout, _lfInfo);_lfPart			= Columns (_lfInfo["Datafilters"]);if (_lfPart > 1){	choices = {_lfPart, 2};	for (k = 0; k < _lfPart; k = k+1)	{		choices [k][0] =  (_lfInfo["Datafilters"])[k];		choices [k][1] =  "Associated tree " + (_lfInfo["Trees"])[k];	}	ChoiceList  (_lfPart,"Which data filter?",1,NO_SKIP,choices);}else{	_lfPart = 0;}if (_lfPart >= 0){	aid = _buildAncestralCacheInternal (LF_NAME, _lfPart, 0);	fd  = _filterDimensions (aid);	SetDialogPrompt ("Save the resulting trees to:");	fprintf (PROMPT_FOR_FILE, CLEAR_FILE, KEEP_OPEN);	for (k = 0; k < fd[0]; k=k+1)	{		fprintf (LAST_FILE_PATH, "Tree T_", (k+1), " = ", _mapSubstitutionsBySiteNewick (aid, k, 1), ";\n");	}	fprintf (LAST_FILE_PATH,CLOSE_FILE);	_destroyAncestralCache (aid);}